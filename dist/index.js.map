{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as core from '@actions/core';\nimport * as tc from '@actions/tool-cache';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { exec } from '@actions/exec';\n\nif (require.main === module) {\n    main().catch(err => {\n        console.error(err.stack);\n        process.exit(1);\n    });\n}\n\nasync function main(): Promise<void> {\n    try {\n        const moduleName = core.getInput('module');\n        let version = core.getInput('version');\n        let tool = core.getInput('name');\n        const cgoEnabled = core.getInput('cgo');\n        const flags = core.getInput('flags');\n        const ldflags = core.getInput('ldflags');\n        const tags = core.getInput('tags');\n\n        if (!moduleName || !version) {\n            throw new Error('Input parameters `module` and `version` are required.');\n        }\n\n        if (!tool) {\n            const parts = moduleName.split('/');\n            tool = parts.pop()!;\n            if (tool === 'cmd' && parts.length > 0) {\n                tool = parts.pop()!;\n            }\n        }\n\n        // resolve the actual version if 'latest' is specified\n        if (version === 'latest') {\n            // reduce module name to fqdn/owner/repo for go list\n            let rootName = moduleName.split('/').slice(0, 3).join('/');\n            let latest = '';\n            await exec('go', ['list', '-u', '-m', '-f', '{{.Version}}', `${rootName}@latest`], {\n                listeners: {\n                    stdout: (data: Buffer) => {\n                        latest += data.toString();\n                    }\n                }\n            });\n            if (latest) {\n                version = latest.trim();\n            } else {\n                throw new Error(`Unable to determine latest version for ${moduleName}`);\n            }\n        }\n\n        let cachePath = tc.find(tool, version);\n\n        if (!cachePath) {\n            const gobin = fs.mkdtempSync(path.join(os.tmpdir(), 'gobin-'));\n            process.env.GOBIN = gobin;\n            if (cgoEnabled === 'false') {\n                process.env.CGO_ENABLED = '0';\n            }\n\n            core.info(`Installing ${moduleName}@${version}`);\n            await exec('go', ['install', ...flags.split(' '), `-ldflags=${ldflags}`, `-tags=${tags}`, `${moduleName}@${version}`]);\n\n            const binPath = path.join(gobin, tool);\n\n            if (!fs.existsSync(binPath)) {\n                throw new Error(`Binary '${tool}' not found after installation`);\n            }\n\n            cachePath = await tc.cacheFile(binPath, tool, tool, version);\n        }\n\n        core.addPath(cachePath);\n        core.setOutput('version', version);\n        core.info(`Installed ${moduleName} version ${version} as ${tool}`);\n    } catch (err) {\n        core.setFailed(`Action failed with error ${err}`);\n    }\n}\n"]}